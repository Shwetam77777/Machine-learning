from sklearn.datasets import load_iris
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import KFold,StratifiedKFold,cross_val_score

kf = KFold(n_splits=3)
for train_set,test_set in kf.split([1,2,3,4,5,6,7,8,9]):
    print("train set : {} and test set {}".format(train_set,test_set))


def get_model(model,X_train,X_test,y_train,y_test):
    model.fit(X_train,y_train)
    return model.score(X_test,y_test)

knn_score = []
gnb_score = []
dtc_score = []
dataset=load_iris()
X = dataset.data
y = dataset.target
skf = StratifiedKFold(n_splits=3)
for train_set,test_set in skf.split(X,y):
    X_train,X_test=X[train_set],X[test_set]
    y_train,y_test = y[train_set],y[test_set]
    knn_score.append(get_model(KNeighborsClassifier(),X_train,X_test,y_train,y_test))
    gnb_score.append(get_model(GaussianNB(), X_train, X_test, y_train, y_test))
    dtc_score.append(get_model(DecisionTreeClassifier(), X_train, X_test, y_train, y_test))

print("KNN K-FOLD SCORE:  ",sum(knn_score)/len(knn_score))
print("GNB K-FOLD SCORE:  ",sum(gnb_score)/len(knn_score))
print("DTC K-FOLD SCORE:  ",sum(dtc_score)/len(knn_score))


knn_cv = cross_val_score(KNeighborsClassifier(),X,y)
gnb_cv = cross_val_score(GaussianNB(),X,y)
dtc_cv = cross_val_score(DecisionTreeClassifier(),X,y)
print(knn_cv.mean())
print(gnb_cv.mean())
print(dtc_cv.mean())